@page "/"
@layout LoginLayout
@using BLL.Services
@using Entities.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using WebApp.Classes
@using WebApp.Components.Layout 
@rendermode InteractiveServer
@inject NavigationManager Navigation
<div class="container p-5">
    <div class=" row p-5">
        <section class="vh-100">
            <div class="card container-fluid h-custom">
                <div class="row d-flex justify-content-center align-items-center h-80 p-5">
                    <div class="col-md-9 col-lg-6 col-xl-5">
                        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-login-form/draw2.webp"
                             class="img-fluid" alt="Sample image">
                    </div>
                    <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
                        <form>
                            <div class="d-flex flex-row align-items-center justify-content-center justify-content-lg-start">
                                <p class="lead fw-normal mb-0 me-3">INICIAR SESIÓN</p>
                               
                            </div>
                            @if(loading){
                                <div class="row">
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                </div>

                            }
                         
                            <!-- Email input -->
                            <div data-mdb-input-init class="form-outline mb-4 pt-2">
                                <input @bind="@user" type="text" id="form3Example3" class="form-control form-control-lg"
                                       placeholder="Ingrese Usuario" />
                                <label class="form-label" for="form3Example3">Usuario</label>
                            </div>

                            <!-- Password input -->
                            <div data-mdb-input-init class="form-outline mb-3 pt-2">
                                <input @bind=@password type="password" id="form3Example4" class="form-control form-control-lg"
                                       placeholder="Ingrese Contraseña" />
                                <label class="form-label" for="form3Example4">Contraseña</label>
                            </div>

                           

                            <div class="text-center text-lg-start mt-4 pt-2 pt-2">
                                <button @onclick="async()=>await Init(user,password)" type="button" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg"
                                        style="padding-left: 2.5rem; padding-right: 2.5rem;">
                                    Login
                                </button>
                               
                            </div>

                        </form>
                    </div>
                </div>
            </div>
           
        </section>

    </div>

</div>

@code {
    [Inject] UserService userService { get; set; }
    @inject ProtectedSessionStorage ProtectedSessionStore
    [Inject] AlertServices alertServices { get; set; }
    private string user,password;
    private bool loading = false;
    private async Task Init(string user,string password)
    {
        if (await validations())
        {
            loading = true;

            User userLogin = new()
                {
                    Username = user,
                    Password = Crypto.EncryptString("b14ca5898a4e4133bbce2ea2315a1918", password)
                };

            var result = await userService.GetUserAsync(userLogin);
            if (result != null)
            {
                await Task.Delay(500);
                await ProtectedSessionStore.SetAsync("RolId", result.RolId);
                await ProtectedSessionStore.SetAsync("UserId", result.Id);
                await ProtectedSessionStore.SetAsync("name", result.Name);
                UserStateService.CurrentUser = result;
                Navigation.NavigateTo("employment");
            }
            else
            {
                await alertServices.SweetAlertMessage("Login", "Usuario o contraseña invalida.", SweetAlertIcon.Error, 1000);
                user = string.Empty;
                password = string.Empty;
            }
            loading = false;
        }
        
    }
    private async Task CreateUser()
    {
        User user = new User
            {
                Name = "Gardenia",
                Username = "garde98",
                Password = Crypto.EncryptString("b14ca5898a4e4133bbce2ea2315a1918", "garde1234"),
                Code = Guid.NewGuid(),
                CrDate=DateTime.Now,
                Email="garde.1999@gmail.com",
                CreateBy=1,
                Status=true,
                RolId=2,
                IdentityNumber="1603-1999-00098",
                ModDate=DateTime.Now,
                Birthday=new DateTime(year: 1998, month:06,day:07)

            };
        await userService.SaveUserAsync(user);

    }

    private async Task<bool> validations()
    {
        if (string.IsNullOrEmpty(user))
        {
            await alertServices.SweetAlertMessage("Login", "Campo de usuario es necesario.", SweetAlertIcon.Error, 1000);
            return false;
        }
        if (string.IsNullOrEmpty(password))
        {
            await alertServices.SweetAlertMessage("Login", "Campo de contraseña es necesario.", SweetAlertIcon.Error, 1000);
            return false;
        }
        return true;
    }

   
}
